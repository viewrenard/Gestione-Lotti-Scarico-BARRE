<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="SqlConnection1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>704, 17</value>
  </metadata>
  <metadata name="ComDataUltimoInventarioGenerale.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 56</value>
  </metadata>
  <metadata name="ComUltimoInventarioProdotto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>841, 17</value>
  </metadata>
  <data name="ComUltimoInventarioProdotto.CommandText" xml:space="preserve">
    <value>SELECT        SpecificheOrdFornitori.DataInventario, SUM(SpecificheOrdFornitori.quantitaconsegnata) AS quantitaconsegnata, SpecificheOrdFornitori.UDM, 
                         SpecificheOrdFornitori.QuantitaOrdinataNum AS QuantitaOrdinata
FROM            SpecificheOrdFornitori LEFT OUTER JOIN
                         ordineFornitore ON SpecificheOrdFornitori.Idordine = ordineFornitore.IdOrdine
WHERE        (ordineFornitore.NumDocumento = N'INVENTARIO') AND (ordineFornitore.Societa = @Varditta) AND (SpecificheOrdFornitori.IdArticolo = @IdProdotto) AND 
                         (ordineFornitore.Data &gt;= @Data) AND (NOT (SpecificheOrdFornitori.DataInventario IS NULL))
GROUP BY SpecificheOrdFornitori.DataInventario, SpecificheOrdFornitori.UDM, SpecificheOrdFornitori.QuantitaOrdinataNum</value>
  </data>
  <metadata name="ComAcquistiArrivati.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>259, 56</value>
  </metadata>
  <data name="ComAcquistiArrivati.CommandText" xml:space="preserve">
    <value>SELECT        SpecificheOrdFornitori.quantitaconsegnata AS Acquisti, SpecificheOrdFornitori.UDM, ordineFornitore.IdOrdine
FROM            TB_DOCUMENTI_ORDINI_FORNITORI INNER JOIN
                         ordineFornitore ON TB_DOCUMENTI_ORDINI_FORNITORI.ORDINE_FORNITORE = ordineFornitore.IdOrdine RIGHT OUTER JOIN
                         SpecificheOrdFornitori ON ordineFornitore.IdOrdine = SpecificheOrdFornitori.Idordine
WHERE        (ordineFornitore.Societa = @Varditta) AND (SpecificheOrdFornitori.IdArticolo = @IdProdotto) AND (ordineFornitore.FlagAnnullato &lt;&gt; N'S' OR
                         ordineFornitore.FlagAnnullato IS NULL) AND (TB_DOCUMENTI_ORDINI_FORNITORI.DATADOCUMENTO &gt;= @Datainizio)
GROUP BY SpecificheOrdFornitori.quantitaconsegnata, SpecificheOrdFornitori.UDM, ordineFornitore.IdOrdine</value>
  </data>
  <metadata name="ComAcquistiDaArrivare.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>418, 56</value>
  </metadata>
  <data name="ComAcquistiDaArrivare.CommandText" xml:space="preserve">
    <value>SELECT        SpecificheOrdFornitori.quantita AS Acquisti, SpecificheOrdFornitori.UDM
FROM            SpecificheOrdFornitori LEFT OUTER JOIN
                         ordineFornitore ON SpecificheOrdFornitori.Idordine = ordineFornitore.IdOrdine
WHERE        (ordineFornitore.Societa = @Varditta) AND (SpecificheOrdFornitori.IdArticolo = @IdProdotto) AND (ordineFornitore.Data &gt;= @Datainizio) AND 
                         (SpecificheOrdFornitori.quantitaconsegnata IS NULL) AND (SpecificheOrdFornitori.CONFERMATO = 0) AND (ordineFornitore.FlagInventario = 0)</value>
  </data>
  <metadata name="ComVenditeFatturate.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>596, 56</value>
  </metadata>
  <data name="ComVenditeFatturate.CommandText" xml:space="preserve">
    <value>SELECT SUM(SpecifichePrevOrdFatt.FattQuantNumerico) AS Vendite, SpecifichePrevOrdFatt.UDM FROM Fatturazione INNER JOIN SpecifichePrevOrdFatt ON Fatturazione.IdFattura = SpecifichePrevOrdFatt.IdFatt WHERE (Fatturazione.Societa = @Varditta) AND (Fatturazione.Data &gt;= @datainizio) AND (SpecifichePrevOrdFatt.progressivo = @Idprodotto) GROUP BY SpecifichePrevOrdFatt.UDM</value>
  </data>
  <metadata name="ComVenditeDaFatturare.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>764, 56</value>
  </metadata>
  <data name="ComVenditeDaFatturare.CommandText" xml:space="preserve">
    <value>SELECT SpecifichePrevOrdFatt.OrdQuant AS Vendite, SpecifichePrevOrdFatt.UDM, OrdineCliente.FlagImpegnato FROM SpecifichePrevOrdFatt INNER JOIN OrdineCliente ON SpecifichePrevOrdFatt.IdOrd = OrdineCliente.IdOrdine INNER JOIN ContainersOrdine ON SpecifichePrevOrdFatt.NumContainer = ContainersOrdine.NumContainer AND SpecifichePrevOrdFatt.IdOrd = ContainersOrdine.IDOrdine WHERE (OrdineCliente.dataConsegna &gt;= @datainizio) AND (OrdineCliente.Societa = @Varditta) AND (SpecifichePrevOrdFatt.IdFatt IS NULL) AND (SpecifichePrevOrdFatt.progressivo = @Idprodotto) AND (ContainersOrdine.IDTipoContainer &lt;&gt; 0) AND (OrdineCliente.FlagImpegnato IS NULL)</value>
  </data>
  <metadata name="ComAcquistiArrivatiTutti.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 95</value>
  </metadata>
  <data name="ComAcquistiArrivatiTutti.CommandText" xml:space="preserve">
    <value>SELECT        SpecificheOrdFornitori.quantitaconsegnata AS Quantita, SpecificheOrdFornitori.UDM, ordineFornitore.IdOrdine AS NumOrdine, ordineFornitore.Data AS DataOrdine, 
                         TB_DOCUMENTI_ORDINI_FORNITORI.DATADOCUMENTO AS DataConsegna, ordineFornitore.Riferimento AS Descrizione, ArchivioFornitori.Descrizione_1 AS CliFor, 
                         TB_DOCUMENTI_ORDINI_FORNITORI.NUMDOCUMENTO
FROM            ArchivioFornitori INNER JOIN
                         ordineFornitore ON ArchivioFornitori.IDFornitore = ordineFornitore.IdFornitore INNER JOIN
                         TB_DOCUMENTI_ORDINI_FORNITORI ON ordineFornitore.IdOrdine = TB_DOCUMENTI_ORDINI_FORNITORI.ORDINE_FORNITORE RIGHT OUTER JOIN
                         SpecificheOrdFornitori ON ordineFornitore.IdOrdine = SpecificheOrdFornitori.Idordine
WHERE        (ordineFornitore.Societa = @Varditta) AND (SpecificheOrdFornitori.IdArticolo = @IdProdotto) AND (ordineFornitore.FlagAnnullato &lt;&gt; N'S' OR
                         ordineFornitore.FlagAnnullato IS NULL) AND (TB_DOCUMENTI_ORDINI_FORNITORI.DATADOCUMENTO &gt;= @Datainizio)
ORDER BY DataOrdine</value>
  </data>
  <metadata name="ComAcquistiDaArrivareTutti.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>201, 95</value>
  </metadata>
  <data name="ComAcquistiDaArrivareTutti.CommandText" xml:space="preserve">
    <value>SELECT        SpecificheOrdFornitori.UDM, ordineFornitore.IdOrdine AS NumOrdine, ordineFornitore.dataConsegna AS DataConsegna, ordineFornitore.Riferimento AS Descrizione, 
                         ArchivioFornitori.Descrizione_1 AS CliFor, ordineFornitore.Data AS DataOrdine, SpecificheOrdFornitori.quantita AS Quantita
FROM            ArchivioFornitori INNER JOIN
                         ordineFornitore ON ArchivioFornitori.IDFornitore = ordineFornitore.IdFornitore RIGHT OUTER JOIN
                         SpecificheOrdFornitori ON ordineFornitore.IdOrdine = SpecificheOrdFornitori.Idordine
WHERE        (ordineFornitore.Societa = @Varditta) AND (SpecificheOrdFornitori.IdArticolo = @IdProdotto) AND (SpecificheOrdFornitori.quantitaconsegnata IS NULL) AND 
                         (ordineFornitore.dataConsegna &gt;= @Datainizio)
ORDER BY DataConsegna</value>
  </data>
  <metadata name="ComVenditeFatturateTutti.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>511, 17</value>
  </metadata>
  <data name="ComVenditeFatturateTutti.CommandText" xml:space="preserve">
    <value>SELECT        SpecifichePrevOrdFatt.FattQuantNumerico AS Quantita, Fatturazione.Data AS DataOrdine, SpecifichePrevOrdFatt.UDM, Fatturazione.N_Fattura AS NumFattura, 
                         Fatturazione.Riferimento AS Descrizione, ArchivioFornitori.Descrizione_1 AS CliFor
FROM            Fatturazione INNER JOIN
                         SpecifichePrevOrdFatt ON Fatturazione.IdFattura = SpecifichePrevOrdFatt.IdFatt INNER JOIN
                         ArchivioFornitori ON Fatturazione.IdCliente = ArchivioFornitori.IDFornitore
WHERE        (Fatturazione.Societa = @Varditta) AND (Fatturazione.Data &gt;= @datainizio) AND (SpecifichePrevOrdFatt.progressivo = @Idprodotto)
ORDER BY DataOrdine</value>
  </data>
  <metadata name="ComVenditeDaFatturareTutti.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>404, 95</value>
  </metadata>
  <data name="ComVenditeDaFatturareTutti.CommandText" xml:space="preserve">
    <value>SELECT        SpecifichePrevOrdFatt.OrdQuant AS Quantita, SpecifichePrevOrdFatt.UDM, ArchivioFornitori.Descrizione_1 AS CliFor, OrdineCliente.Data AS DataOrdine, 
                         OrdineCliente.dataConsegna AS DataConsegna, OrdineCliente.Riferimento AS Descrizione, OrdineCliente.IdOrdine AS NumOrdine, OrdineCliente.FlagImpegnato
FROM            OrdineCliente INNER JOIN
                         SpecifichePrevOrdFatt ON OrdineCliente.IdOrdine = SpecifichePrevOrdFatt.IdOrd INNER JOIN
                         ContainersOrdine ON SpecifichePrevOrdFatt.IdOrd = ContainersOrdine.IDOrdine AND 
                         SpecifichePrevOrdFatt.NumContainer = ContainersOrdine.NumContainer LEFT OUTER JOIN
                         ArchivioFornitori ON OrdineCliente.IdCliente = ArchivioFornitori.IDFornitore
WHERE        (SpecifichePrevOrdFatt.progressivo = @Idprodotto) AND (SpecifichePrevOrdFatt.IdFatt IS NULL) AND (OrdineCliente.Societa = @Varditta) AND 
                         (ContainersOrdine.IDTipoContainer &lt;&gt; 0) AND (OrdineCliente.dataConsegna &gt;= @DataInizio)</value>
  </data>
  <metadata name="DsDettagliInventario1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>341, 17</value>
  </metadata>
  <metadata name="DsUDMListino.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>612, 95</value>
  </metadata>
  <metadata name="ComUDMListino.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>741, 95</value>
  </metadata>
  <metadata name="SqlSelectCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="SqlSelectCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>0, 0</value>
  </metadata>
  <metadata name="SqlSelectCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="SqlSelectCommand1.CommandText" xml:space="preserve">
    <value>SELECT        SUM(Quantita) AS Giacenza, MAX(DataScadenza) AS DataScadenza, Lotto
FROM            TabellaLotti
WHERE        (IdProdotto = @Prodotto) AND (DataScadenza &gt; @Data)
GROUP BY Lotto
HAVING        (SUM(Quantita) &gt; 0)</value>
  </data>
  <metadata name="SqlAdapterLotto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>882, 95</value>
  </metadata>
  <metadata name="DsLotto1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>240, 17</value>
  </metadata>
  <metadata name="ComPrezziAcquisto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 134</value>
  </metadata>
  <data name="ComPrezziAcquisto.CommandText" xml:space="preserve">
    <value>SELECT        SpecificheOrdFornitori.PrezzoFattura, TabellaLotti.Quantita AS QuantitaConsegnata, TabellaLotti.UDM, TabellaLotti.DataScadenza AS Scadenza, TabellaLotti.Lotto, 
                         ordineFornitore.IdOrdine, ordineFornitore.DataDocumento
FROM            SpecificheOrdFornitori INNER JOIN
                         ordineFornitore ON SpecificheOrdFornitori.Idordine = ordineFornitore.IdOrdine INNER JOIN
                         TabellaLotti ON ordineFornitore.IdOrdine = TabellaLotti.IdOrdine AND SpecificheOrdFornitori.IdArticolo = TabellaLotti.IdProdotto
WHERE        (SpecificheOrdFornitori.IdArticolo = @Articolo) AND (ordineFornitore.DataDocumento BETWEEN @datainizio AND @datafine) AND 
                         (SpecificheOrdFornitori.PrezzoFattura &gt; 0) AND (TabellaLotti.Quantita &gt; N'0')
ORDER BY ordineFornitore.DataDocumento DESC</value>
  </data>
  <metadata name="DsUDM1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>140, 17</value>
  </metadata>
  <metadata name="DsScadenze1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="SqlDataAdapter1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>174, 134</value>
  </metadata>
  <metadata name="SqlCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="SqlCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>0, 0</value>
  </metadata>
  <metadata name="SqlCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>74</value>
  </metadata>
</root>